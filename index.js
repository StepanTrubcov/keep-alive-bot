const { Telegraf } = require('telegraf');
const axios = require('axios');
const cron = require('node-cron');
const express = require('express'); // –î–æ–±–∞–≤–ª—è–µ–º Express

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN || '8147456024:AAEEoEG3_V2SI2F8iWxlToaWH4JPMunlqx4';
const TARGET_SERVERS = [
  'https://assistant-in-singing-tg.onrender.com/ping',
  'https://kruki.onrender.com/',
  process.env.RENDER_EXTERNAL_URL ? `${process.env.RENDER_EXTERNAL_URL}/ping` : null
].filter(Boolean);
const PING_INTERVAL_MINUTES = process.env.PING_INTERVAL_MINUTES || 5;
const SELF_PING_INTERVAL_MINUTES = 14;
const PORT = process.env.PORT || 3000; // Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ—Ä—Ç

const bot = new Telegraf(BOT_TOKEN);
const app = express(); // –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());
app.get('/ping', (req, res) => {
  console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /ping');
  res.status(200).json({ status: 'ok', time: new Date().toISOString() });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–º–æ–ø–∏–Ω–≥–∞
async function pingSelf() {
  if (!process.env.RENDER_EXTERNAL_URL) return;
  
  try {
    const start = Date.now();
    await axios.get(`${process.env.RENDER_EXTERNAL_URL}/ping`, { timeout: 5000 });
    const pingTime = Date.now() - start;
    console.log(`üîÑ [${new Date().toISOString()}] –°–∞–º–æ–ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω (${pingTime}–º—Å)`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞: ${error.message}`);
  }
}

async function pingServer(url, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      const start = Date.now();
      const response = await axios.get(url, { timeout: 10000 });
      const pingTime = Date.now() - start;
      
      console.log(`‚úÖ [${new Date().toISOString()}] –£—Å–ø–µ—à–Ω—ã–π –ø–∏–Ω–≥ ${url} (${pingTime}–º—Å)`);
      return { success: true, pingTime };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${i+1}/${retries}: –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ ${url} - ${error.message}`);
      if (i < retries - 1) await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }
  return { success: false };
}

async function pingAllServers() {
  console.log(`\n=== –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–∏–Ω–≥–∞ –≤ ${new Date().toISOString()} ===`);
  
  const results = await Promise.all(
    TARGET_SERVERS.map(url => pingServer(url))
  );
  
  const failed = results.filter(r => !r.success).length;
  const success = results.length - failed;
  
  console.log(`=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${success} —É—Å–ø–µ—à–Ω–æ, ${failed} —Å –æ—à–∏–±–∫–∞–º–∏ ===\n`);
  
  return results;
}

function setupPingSchedule() {
  pingAllServers();
  
  cron.schedule(`*/${PING_INTERVAL_MINUTES} * * * *`, () => {
    pingAllServers();
  });
  
  cron.schedule(`*/${SELF_PING_INTERVAL_MINUTES} * * * *`, () => {
    pingSelf();
  });
  
  console.log(`–ù–∞—Å—Ç—Ä–æ–µ–Ω —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ ${PING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç –∏ —Å–∞–º–æ–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ ${SELF_PING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç`);
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Å–∞–º–æ–ø–∏–Ω–≥–∞)
bot.telegram.setWebhook(''); // –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ–±—Ö—É–∫ –µ—Å–ª–∏ –±—ã–ª
bot.use((ctx, next) => {
  if (ctx.updateType === 'message' && ctx.message.text) return next();
  if (ctx.updateType === 'callback_query') return next();
  ctx.reply('–Ø —Ä–∞–±–æ—Ç–∞—é! ‚úÖ'); // –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å
  return;
});

bot.command('ping', async (ctx) => {
  const loadingMsg = await ctx.reply('‚è≥ –ü–∏–Ω–≥—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã...');
  
  const results = await pingAllServers();
  const successCount = results.filter(r => r.success).length;
  
  await ctx.telegram.editMessageText(
    ctx.chat.id,
    loadingMsg.message_id,
    null,
    `üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏–Ω–≥–∞:\n\n` +
    `‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${TARGET_SERVERS.length}\n` +
    `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date().toLocaleString()}\n\n` +
    `–°–ª–µ–¥—É—é—â–∏–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ ${PING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç`,
    { parse_mode: 'HTML' }
  );
});

bot.command('status', async (ctx) => {
  try {
    const statusMessages = await Promise.all(
      TARGET_SERVERS.map(async url => {
        try {
          const start = Date.now();
          await axios.get(url, { timeout: 5000 });
          const pingTime = Date.now() - start;
          return `‚úÖ ${url} - ONLINE (${pingTime}–º—Å)`;
        } catch (e) {
          return `‚ùå ${url} - OFFLINE (${e.message})`;
        }
      })
    );
    
    await ctx.reply(
      `üîÑ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n${statusMessages.join('\n')}\n\n` +
      `–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date().toLocaleString()}`,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('Status check error:', error);
    await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app.listen(PORT, () => {
  console.log(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
  bot.launch()
    .then(() => {
      console.log('Keep-alive –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
      setupPingSchedule();
    })
    .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
