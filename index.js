const { Telegraf } = require('telegraf');
const axios = require('axios');
const cron = require('node-cron');
const express = require('express');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN || '8147456024:AAEEoEG3_V2SI2F8iWxlToaWH4JPMunlqx4';
const YOUR_CHAT_ID = process.env.YOUR_CHAT_ID || '5102803347';
const TARGET_SERVERS = [
  'https://assistant-in-singing-tg.onrender.com/ping',
  'https://kruki.onrender.com/',
  'https://keep-alive-bot-j0yl.onrender.com/ping'
].filter(Boolean);
const PING_INTERVAL_MINUTES = parseInt(process.env.PING_INTERVAL_MINUTES) || 5;
const SELF_PING_INTERVAL_MINUTES = 5;
const PORT = process.env.PORT || 3000; // Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–∞–µ—Ç PORT

const bot = new Telegraf(BOT_TOKEN);
const app = express();

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è cron
let isCronInitialized = false;

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());
app.get('/ping', (req, res) => {
  console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /ping –æ—Ç IP: ${req.ip} –≤ ${new Date().toISOString()}`);
  res.status(200).json({
    status: 'ok',
    time: new Date().toISOString(),
    server: 'Keep-Alive Bot'
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function sendNotification(message) {
  try {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${message}`);
    await bot.telegram.sendMessage(YOUR_CHAT_ID, message, { parse_mode: 'HTML' });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–º–æ–ø–∏–Ω–≥–∞
async function pingSelf() {
  const selfUrl = 'https://keep-alive-bot-j0yl.onrender.com/ping';
  try {
    console.log(`üîÑ –ù–∞—á–∞–ª–æ —Å–∞–º–æ–ø–∏–Ω–≥–∞: ${selfUrl} –≤ ${new Date().toISOString()}`);
    const start = Date.now();
    const response = await axios.get(selfUrl, { timeout: 8000 });
    const pingTime = Date.now() - start;

    const message = `üîÑ <b>–°–∞–º–æ–ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!</b>\n‚è± –í—Ä–µ–º—è: ${pingTime}–º—Å\nüîó –°–µ—Ä–≤–µ—Ä: ${selfUrl}\nüõ° –ö–æ–¥: ${response.status}`;
    console.log(message);
    await sendNotification(message);
    return true;
  } catch (error) {
    const message = `‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞!</b>\nüîó –°–µ—Ä–≤–µ—Ä: ${selfUrl}\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
    console.error(message);
    await sendNotification(message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞
async function pingServer(url, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      const start = Date.now();
      const response = await axios.get(url, { timeout: 10000 });
      const pingTime = Date.now() - start;

      const message = `‚úÖ <b>–£—Å–ø–µ—à–Ω—ã–π –ø–∏–Ω–≥!</b>\nüîó –°–µ—Ä–≤–µ—Ä: ${url}\n‚è± –í—Ä–µ–º—è: ${pingTime}–º—Å\nüõ° –ö–æ–¥: ${response.status}`;
      console.log(message);
      await sendNotification(message);
      return { success: true, pingTime };
    } catch (error) {
      console.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${retries}: –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ ${url} - ${error.message}`);
      if (i === retries - 1) {
        const failMessage = `‚ùå <b>–ü–∏–Ω–≥ –Ω–µ—É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫</b>\nüîó –°–µ—Ä–≤–µ—Ä: ${url}\n‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
        console.error(failMessage);
        await sendNotification(failMessage);
      }
      if (i < retries - 1) await new Promise(resolve => setTimeout(resolve, 5000)); // –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞
    }
  }
  return { success: false };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
async function pingAllServers() {
  console.log(`\n=== –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–∏–Ω–≥–∞ –≤ ${new Date().toISOString()} ===`);
  await sendNotification(`üîÑ <b>–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–∏–Ω–≥–∞</b>\n‚è∞ ${new Date().toLocaleString()}`);

  const results = await Promise.all(
    TARGET_SERVERS.map(url => pingServer(url))
  );

  const failed = results.filter(r => !r.success).length;
  const success = results.length - failed;

  const summaryMessage = `üìä <b>–ò—Ç–æ–≥–∏ –ø–∏–Ω–≥–∞:</b>\n‚úÖ –£—Å–ø–µ—à–Ω–æ: ${success}\n‚ùå –û—à–∏–±–∫–∏: ${failed}\n‚è∞ ${new Date().toLocaleString()}`;
  console.log(summaryMessage);
  await sendNotification(summaryMessage);
  return results;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∏–Ω–≥–æ–≤
function setupPingSchedule() {
  if (isCronInitialized) {
    console.log(`‚ö†Ô∏è Cron —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ ${new Date().toISOString()}`);
    return;
  }
  isCronInitialized = true;
  console.log(`‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–∏–Ω–≥–æ–≤ –≤ ${new Date().toISOString()}...`);

  // –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ cron
  cron.schedule('* * * * *', () => {
    console.log(`[–¢–µ—Å—Ç] Cron —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}`);
  });

  // –û—Å–Ω–æ–≤–Ω–æ–π –ø–∏–Ω–≥ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
  cron.schedule(`*/${PING_INTERVAL_MINUTES} * * * *`, async () => {
    console.log(`‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –ø–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ ${new Date().toISOString()}...`);
    await pingAllServers();
  });

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∞–º–æ–ø–∏–Ω–≥ —á–µ—Ä–µ–∑ setInterval, –µ—Å–ª–∏ cron –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
  setInterval(async () => {
    console.log(`üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∞–º–æ–ø–∏–Ω–≥ —á–µ—Ä–µ–∑ setInterval –≤ ${new Date().toISOString()}...`);
    await pingSelf();
  }, SELF_PING_INTERVAL_MINUTES * 60 * 1000);

  // –ü–µ—Ä–≤—ã–π –ø–∏–Ω–≥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  setTimeout(async () => {
    console.log(`üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –ø–∏–Ω–≥–∞ –≤ ${new Date().toISOString()}...`);
    await pingAllServers();
    await pingSelf();
    await sendNotification(`ü§ñ <b>–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—â–µ–Ω!</b>\nüìå –ê–≤—Ç–æ–ø–∏–Ω–≥: –∫–∞–∂–¥—ã–µ ${PING_INTERVAL_MINUTES} –º–∏–Ω\nüîÅ –°–∞–º–æ–ø–∏–Ω–≥: –∫–∞–∂–¥—ã–µ ${SELF_PING_INTERVAL_MINUTES} –º–∏–Ω`);
  }, 5000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
bot.command('start', (ctx) => {
  const welcomeMessage = `
üëã <b>–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!</b>
–Ø - –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–æ–≤
üîπ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
üîπ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤
‚è≥ –°–µ—Ä–≤–µ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ ${PING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç
üîÑ –°–∞–º–æ–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ ${SELF_PING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç
  `;
  ctx.reply(welcomeMessage, { parse_mode: 'HTML' });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.command('ping', async (ctx) => {
  const loadingMsg = await ctx.reply('‚è≥ –ü–∏–Ω–≥—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã...');
  const results = await pingAllServers();
  const successCount = results.filter(r => r.success).length;

  await ctx.telegram.editMessageText(
    ctx.chat.id,
    loadingMsg.message_id,
    null,
    `üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏–Ω–≥–∞:</b>\n\n` +
    `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${TARGET_SERVERS.length}\n` +
    `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}\n\n` +
    `üîÑ –°–ª–µ–¥—É—é—â–∏–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ ${PING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç`,
    { parse_mode: 'HTML' }
  );
});

bot.command('status', async (ctx) => {
  try {
    const statusMessages = await Promise.all(
      TARGET_SERVERS.map(async url => {
        try {
          const start = Date.now();
          await axios.get(url, { timeout: 5000 });
          const pingTime = Date.now() - start;
          return `‚úÖ ${url} - ONLINE (${pingTime}–º—Å)`;
        } catch (e) {
          return `‚ùå ${url} - OFFLINE (${e.message})`;
        }
      })
    );

    await ctx.reply(
      `üì° <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:</b>\n\n${statusMessages.join('\n')}\n\n` +
      `‚è∞ ${new Date().toLocaleString()}`,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
    await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤');
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
app.listen(PORT, async () => {
  console.log(`üöÄ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT} –≤ ${new Date().toISOString()}`);
  try {
    await bot.launch();
    console.log(`ü§ñ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ ${new Date().toISOString()}!`);
    setupPingSchedule();
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${err.message}`);
    process.exit(1);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGINT. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  bot.stop('SIGINT');
  process.exit();
});

process.once('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω SIGTERM. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...');
  bot.stop('SIGTERM');
  process.exit();
});