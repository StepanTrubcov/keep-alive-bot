const { Telegraf } = require('telegraf');
const axios = require('axios');
const cron = require('node-cron');
const express = require('express');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN || '8147456024:AAEEoEG3_V2SI2F8iWxlToaWH4JPMunlqx4';
const YOUR_CHAT_ID = process.env.YOUR_CHAT_ID || '5102803347'; // –í–∞—à ID —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
const TARGET_SERVERS = [
  'https://assistant-in-singing-tg.onrender.com/ping',
  'https://kruki.onrender.com/',
  process.env.RENDER_EXTERNAL_URL ? `${process.env.RENDER_EXTERNAL_URL}/ping` : null
].filter(Boolean);
const PING_INTERVAL_MINUTES = process.env.PING_INTERVAL_MINUTES || 5;
const SELF_PING_INTERVAL_MINUTES = 5;
const PORT = process.env.PORT || 3000;

const bot = new Telegraf(BOT_TOKEN);
const app = express();

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json());
app.get('/ping', (req, res) => {
  console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /ping');
  res.status(200).json({ status: 'ok', time: new Date().toISOString() });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async function sendNotification(message) {
  try {
    await bot.telegram.sendMessage(YOUR_CHAT_ID, message, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–º–æ–ø–∏–Ω–≥–∞
async function pingSelf() {
  if (!process.env.RENDER_EXTERNAL_URL) return;
  
  try {
    const start = Date.now();
    await axios.get(`${process.env.RENDER_EXTERNAL_URL}/ping`, { timeout: 5000 });
    const pingTime = Date.now() - start;
    const message = `üîÑ <b>–°–∞–º–æ–ø–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!</b>\n–í—Ä–µ–º—è: ${pingTime}–º—Å\n–°–µ—Ä–≤–µ—Ä: ${process.env.RENDER_EXTERNAL_URL}`;
    console.log(`[${new Date().toISOString()}] ${message}`);
    await sendNotification(message);
  } catch (error) {
    const message = `‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Å–∞–º–æ–ø–∏–Ω–≥–∞!</b>\n${error.message}\n–°–µ—Ä–≤–µ—Ä: ${process.env.RENDER_EXTERNAL_URL}`;
    console.warn(`[${new Date().toISOString()}] ${message}`);
    await sendNotification(message);
  }
}

async function pingServer(url, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      const start = Date.now();
      const response = await axios.get(url, { timeout: 10000 });
      const pingTime = Date.now() - start;
      
      const message = `‚úÖ <b>–£—Å–ø–µ—à–Ω—ã–π –ø–∏–Ω–≥!</b>\n–°–µ—Ä–≤–µ—Ä: ${url}\n–í—Ä–µ–º—è: ${pingTime}–º—Å\n–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${response.status}`;
      console.log(`[${new Date().toISOString()}] ${message}`);
      await sendNotification(message);
      
      return { success: true, pingTime };
    } catch (error) {
      const message = `‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${i+1}/${retries}: <b>–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞</b>\n–°–µ—Ä–≤–µ—Ä: ${url}\n–û—à–∏–±–∫–∞: ${error.message}`;
      console.warn(`[${new Date().toISOString()}] ${message}`);
      
      if (i === retries - 1) {
        await sendNotification(`‚ùå <b>–ü–∏–Ω–≥ –Ω–µ—É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫</b>\n–°–µ—Ä–≤–µ—Ä: ${url}\n–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${error.message}`);
      }
      
      if (i < retries - 1) await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }
  return { success: false };
}

async function pingAllServers() {
  console.log(`\n=== –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–∏–Ω–≥–∞ –≤ ${new Date().toISOString()} ===`);
  await sendNotification(`üîÑ <b>–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–∏–Ω–≥–∞</b>\n–í—Ä–µ–º—è: ${new Date().toLocaleString()}`);
  
  const results = await Promise.all(
    TARGET_SERVERS.map(url => pingServer(url))
  );
  
  const failed = results.filter(r => !r.success).length;
  const success = results.length - failed;
  
  const summaryMessage = `üìä <b>–ò—Ç–æ–≥–∏ –ø–∏–Ω–≥–∞:</b>\n–£—Å–ø–µ—à–Ω–æ: ${success}/${TARGET_SERVERS.length}\n–û—à–∏–±–∫–∏: ${failed}\n–í—Ä–µ–º—è: ${new Date().toLocaleString()}`;
  console.log(`[${new Date().toISOString()}] ${summaryMessage}`);
  await sendNotification(summaryMessage);
  
  return results;
}

function setupPingSchedule() {
  pingAllServers();
  
  cron.schedule(`*/${PING_INTERVAL_MINUTES} * * * *`, () => {
    pingAllServers();
  });
  
  cron.schedule(`*/${SELF_PING_INTERVAL_MINUTES} * * * *`, () => {
    pingSelf();
  });
  
  console.log(`–ù–∞—Å—Ç—Ä–æ–µ–Ω —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ ${PING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç –∏ —Å–∞–º–æ–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ ${SELF_PING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç`);
  sendNotification(`ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n–†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ ${PING_INTERVAL_MINUTES} –º–∏–Ω\n–°–∞–º–æ–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ ${SELF_PING_INTERVAL_MINUTES} –º–∏–Ω`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
bot.command('ping', async (ctx) => {
  const loadingMsg = await ctx.reply('‚è≥ –ü–∏–Ω–≥—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã...');
  const results = await pingAllServers();
  const successCount = results.filter(r => r.success).length;
  
  await ctx.telegram.editMessageText(
    ctx.chat.id,
    loadingMsg.message_id,
    null,
    `üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏–Ω–≥–∞:\n\n` +
    `‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${TARGET_SERVERS.length}\n` +
    `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date().toLocaleString()}\n\n` +
    `–°–ª–µ–¥—É—é—â–∏–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ ${PING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç`,
    { parse_mode: 'HTML' }
  );
});

bot.command('status', async (ctx) => {
  try {
    const statusMessages = await Promise.all(
      TARGET_SERVERS.map(async url => {
        try {
          const start = Date.now();
          await axios.get(url, { timeout: 5000 });
          const pingTime = Date.now() - start;
          return `‚úÖ ${url} - ONLINE (${pingTime}–º—Å)`;
        } catch (e) {
          return `‚ùå ${url} - OFFLINE (${e.message})`;
        }
      })
    );
    
    await ctx.reply(
      `üîÑ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n${statusMessages.join('\n')}\n\n` +
      `–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date().toLocaleString()}`,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('Status check error:', error);
    await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤');
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
app.listen(PORT, () => {
  console.log(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  bot.launch()
    .then(() => {
      console.log('Keep-alive –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
      setupPingSchedule();
    })
    .catch(err => {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
      sendNotification(`‚ÄºÔ∏è <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞!</b>\n${err.message}`);
    });
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));