const { Telegraf } = require('telegraf');
const axios = require('axios');
const cron = require('node-cron');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = '8147456024:AAEEoEG3_V2SI2F8iWxlToaWH4JPMunlqx4'; // –¢–æ–∫–µ–Ω —ç—Ç–æ–≥–æ –±–æ—Ç–∞-–ø–∏–Ω–≥–µ—Ä–∞
const TARGET_SERVERS = [ 
  'https://assistant-in-singing-tg.onrender.com/ping' 
];
const PING_INTERVAL_MINUTES = 5; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∏–Ω–≥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö

const bot = new Telegraf(BOT_TOKEN);

async function pingServer(url, retries = 3) {
  for (let i = 0; i < retries; i++) {
    try {
      const start = Date.now();
      const response = await axios.get(url, { timeout: 10000 });
      const pingTime = Date.now() - start;
      
      console.log(`‚úÖ [${new Date().toISOString()}] –£—Å–ø–µ—à–Ω—ã–π –ø–∏–Ω–≥ ${url} (${pingTime}–º—Å)`);
      return { success: true, pingTime };
    } catch (error) {
      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${i+1}/${retries}: –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ ${url} - ${error.message}`);
      if (i < retries - 1) await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }
  return { success: false };
}

async function pingAllServers() {
  console.log(`\n=== –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø–∏–Ω–≥–∞ –≤ ${new Date().toISOString()} ===`);
  
  const results = await Promise.all(
    TARGET_SERVERS.map(url => pingServer(url))
  );
  
  const failed = results.filter(r => !r.success).length;
  const success = results.length - failed;
  
  console.log(`=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${success} —É—Å–ø–µ—à–Ω–æ, ${failed} —Å –æ—à–∏–±–∫–∞–º–∏ ===\n`);
  
  return results;
}

function setupPingSchedule() {
  // –ü–∏–Ω–≥—É–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  pingAllServers();
  
  // –ó–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  cron.schedule(`*/${PING_INTERVAL_MINUTES} * * * *`, () => {
    pingAllServers();
  });
  
  console.log(`–ù–∞—Å—Ç—Ä–æ–µ–Ω —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ ${PING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç`);
}

bot.command('ping', async (ctx) => {
  const loadingMsg = await ctx.reply('‚è≥ –ü–∏–Ω–≥—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã...');
  
  const results = await pingAllServers();
  const successCount = results.filter(r => r.success).length;
  
  await ctx.telegram.editMessageText(
    ctx.chat.id,
    loadingMsg.message_id,
    null,
    `üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏–Ω–≥–∞:\n\n` +
    `‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${TARGET_SERVERS.length}\n` +
    `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date().toLocaleString()}\n\n` +
    `–°–ª–µ–¥—É—é—â–∏–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ ${PING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç`,
    { parse_mode: 'HTML' }
  );
});

bot.command('status', async (ctx) => {
  try {
    const statusMessages = await Promise.all(
      TARGET_SERVERS.map(async url => {
        try {
          const start = Date.now();
          await axios.get(url, { timeout: 5000 });
          const pingTime = Date.now() - start;
          return `‚úÖ ${url} - ONLINE (${pingTime}–º—Å)`;
        } catch (e) {
          return `‚ùå ${url} - OFFLINE (${e.message})`;
        }
      })
    );
    
    await ctx.reply(
      `üîÑ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤:\n\n${statusMessages.join('\n')}\n\n` +
      `–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${new Date().toLocaleString()}`,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('Status check error:', error);
    await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤');
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => {
    console.log('Keep-alive –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    setupPingSchedule();
  })
  .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
